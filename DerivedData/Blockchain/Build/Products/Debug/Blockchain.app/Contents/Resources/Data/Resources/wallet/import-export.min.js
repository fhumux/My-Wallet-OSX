function _ImportExport(){this.init=function(j,l,k){MyWallet.setLoadingText("Loading Import Export View");if(!j.is(":empty")){d();l();return}$.ajax({type:"GET",url:root+"wallet/import-export-template",data:{format:"plain",language:MyWallet.getLanguage()},success:function(m){try{j.html(m);d();l()}catch(n){console.log(n);k()}},error:function(){MyWallet.makeNotice("error","misc-error","Error Downloading Import Export Template");k()}})};function e(j,l){var k=$("#watch-only-modal");k.modal({keyboard:true,backdrop:"static",show:true});k.center();k.find(".address").text(j);k.find(".btn.btn-secondary").unbind().click(function(){k.modal("hide")});k.find(".btn.btn-primary").unbind().click(function(){l();k.modal("hide")})}function f(j,k,m){var l=$("#import-private-key-warning-modal");l.modal({keyboard:true,backdrop:"static",show:true});l.center();l.find(".address").text(j);BlockchainAPI.get_balance([j],function(n){l.find(".address").text(j+" - "+formatBTC(n))},function(n){MyWallet.makeNotice("error","misc-error",n)});l.find(".btn.btn-secondary").unbind().click(function(){k();l.modal("hide")});l.find(".btn.btn-primary").unbind().click(function(){m();l.modal("hide")})}function d(){$('a[data-toggle="tab"]').unbind().on("show",function(j){$(j.target.hash).trigger("show")});$("#import-json-btn").unbind().click(function(){$(this).prop("disabled",true);h($("#import-json"));$(this).prop("disabled",false)});$("#import-address-btn").unbind().click(function(){var k=$.trim($("#import-address-address").val());if(k.length=0){MyWallet.makeNotice("error","misc-error","You must enter an address to import");return}try{var j=new Bitcoin.Address(k);if(j.toString()!=k){throw"Inconsistency between addresses"}$("#import-address-address").val("");e(k,function(){try{if(MyWallet.addWatchOnlyAddress(k)){MyWallet.makeNotice("success","added-address","Successfully Added Address "+j);try{ws.send('{"op":"addr_sub", "addr":"'+j+'"}')}catch(m){}MyWallet.backupWallet("update",function(){MyWallet.get_history()})}else{throw"Wallet Full Or Addresses Exists"}}catch(m){MyWallet.makeNotice("error","misc-error",m)}})}catch(l){MyWallet.makeNotice("error","misc-error","Error importing address: "+l);return}});$("#import-private-scan").unbind().click(function(){MyWallet.getSecondPassword(function(){loadScript("wallet/signer",function(){showPrivateKeyModal(function(j){if(MyWallet.addPrivateKey(j,{compressed:false,app_name:IMPORTED_APP_NAME,app_version:IMPORTED_APP_VERSION})){MyWallet.backupWallet("update",function(){MyWallet.get_history()});MyWallet.makeNotice("success","added-address","Imported Bitcoin Address "+j.getBitcoinAddress())}else{throw"Unable to add private key for bitcoin address "+j.getBitcoinAddress()}},function(j){MyWallet.makeNotice("error","misc-error",j)},"Any Private Key")})})});$("#import-private-btn").unbind().click(function(){var j=$("#import-private-key");try{a($.trim(j.val()))}catch(k){MyWallet.makeNotice("error","misc-error","Error importing private key: "+k)}j.val("")});$("#import-brain-wallet-btn").unbind().click(function(){var l=$("#import-brain-wallet");var j=$.trim(l.val());if(j.length<15){MyWallet.makeNotice("error","misc-error","The passphrase must be at least 15 characters long");return}var k=Crypto.SHA256(j,{asBytes:true});try{a(Bitcoin.Base58.encode(k),"Brain Wallet","brain_wallet")}catch(m){MyWallet.makeNotice("error","misc-error","Error importing private key: "+m)}l.val("")});$("#export-priv-format").change(function(j){$("#json-unencrypted-export").val(MyWallet.makeWalletJSON($("#export-priv-format").val()))});$("#export-crypted").on("show",function(){$("#json-crypted-export").val(MyWallet.getEncryptedWalletData())});$("#export-unencrypted").on("show",function(){MyWallet.getSecondPassword(function(){$("#export-priv-format").val("base58");$("#json-unencrypted-export").val(MyWallet.makeWalletJSON($("#export-priv-format").val()))})});$("#import-backup").on("show",function(){var j=this;i($(j))});$(".paper-wallet-btn").unbind().click(function(){loadScript("wallet/paper-wallet",function(){PaperWallet.showModal()})})}this.importJSON=function(m,k,u,q){try{var l=0;if(m==null||m.length==0){throw"No import data provided!"}var o=null;try{o=$.parseJSON(m);if(o==null){throw"null input_text"}}catch(p){MyWallet.decrypt(m,k.main_password,MyWallet.getDefaultPbkdf2Iterations(),function(v){try{o=$.parseJSON(v);return(o!=null)}catch(w){return false}})}var s=0;var n=function(){try{var v=o.keys[s];var z=v.addr;if(z!=null&&z.length>0&&z!="undefined"){try{if(v.reserve){throw"Ignoring Reserve Key"}var E=v.priv;if(!E){E=v.sec}if(E!=null){var A=MyWallet.getDefaultPbkdf2Iterations();if(o.options&&o.options.pbkdf2_iterations){A=o.options.pbkdf2_iterations}if(o.double_encryption){if(k.second_password){var D=MyWallet.decrypt(E,o.sharedKey+k.second_password,A,MyWallet.isBase58);if(D==null){throw"Error decrypting private key for address "+z}E=D}else{MyWallet.getPassword($("#import-second-password-modal"),function(F){k.second_password=F;ImportExport.importJSON(m,k,u,q)});return}}var B=MyWallet.detectPrivateKeyFormat(E);var C=MyWallet.privateKeyStringToKey(E,B);if(C.getBitcoinAddress().toString()==z||C.getBitcoinAddressCompressed().toString()==z){try{MyWallet.addPrivateKey(C,{compressed:B=="compsipa",app_name:o.created_device_name?o.created_device_name:IMPORTED_APP_NAME,app_version:o.created_device_version?o.created_device_version:IMPORTED_APP_VERSION,created_time:o.created_time?o.created_time:0})}catch(y){}++l}else{throw"Not importing "+z+" because it is inconsistent with the decoded address "}}if(MyWallet.addressExists(z)){if(v.label&&$.trim(v.label.length)>0){MyWallet.setAddressLabel(z,$.trim(v.label))}if(v.tag){MyWallet.setAddressTag(z,v.tag)}else{if(v.reserve){MyWallet.setAddressTag(z,2)}else{MyWallet.setAddressTag(z,1)}}}}catch(y){console.log(y)}}if(s<o.keys.length-1){++s;setTimeout(n,10);return}if(o.address_book!=null){for(var w=0;w<o.address_book.length;++w){var x=o.address_book[w];if(x.addr&&x.label){MyWallet.addAddressBookEntry(x.addr,x.label)}}}$("#import-input_text").val("");if(l>0){u()}else{throw"No Private Keys Imported. Unknown Format Incorrect Password"}}catch(y){console.log(y);try{q(y)}catch(y){}}};if(o==null){l=c(m);$("#import-input_text").val("");if(l>0){u()}else{throw"No Private Keys Imported. Unknown Format or Incorrect Password"}}else{if(o!=null&&o.keys!=null&&o.keys.length>0){if(o.keys.length>1000){MyWallet.makeNotice("info","keys-skipped","Some keys may have been skipped");var t=0;var r=[];var j=function(){try{for(;t<o.keys.length;++t){var v=o.keys[t];var x=v.addr;if(x==null||x.length==0||x=="undefined"){continue}if(v.reserve||v.tag==2){r.push(v.addr)}if(r.length==1000||(t==o.keys.length-1&&r.length>0)){BlockchainAPI.get_balances(r,function(y){try{for(var A in y){if(y[A].final_balance==0){for(var z=0;z<o.keys.length;++z){var C=o.keys[z].addr;if(C==A){if(o.keys.length>1){o.keys.splice(z,1)}--t}}}}setTimeout(j,10)}catch(B){console.log(B);try{q(B)}catch(B){}}},function(y){console.log(y);try{q(y)}catch(y){}});r=[];return}}}catch(w){console.log(w);try{q(w)}catch(w){}}n()};j()}else{n()}}else{throw"Unknown Format"}}}catch(p){console.log(p);try{q(p)}catch(p){}}};function c(l){var n=l.split(/\W+/g);try{var k=0;for(var m in n){var j=n[m];try{var q=MyWallet.detectPrivateKeyFormat(j);var r=MyWallet.privateKeyStringToKey(j,q);var o=q=="compsipa";try{MyWallet.addPrivateKey(r,{compressed:o,app_name:IMPORTED_APP_NAME,app_version:IMPORTED_APP_VERSION})}catch(p){}++k}catch(p){}}return k}catch(p){MyWallet.makeNotice("error","misc-error",p)}return false}function h(j){MyWallet.getMainPassword(function(k){MyWallet.getSecondPassword(function(l){ImportExport.importJSON(j.val(),{main_password:k,second_password:l},function(){MyWallet.backupWallet("update",function(){MyWallet.get_history()})},function(m){MyWallet.makeNotice("error","misc-error",m)})})})}function b(l,j){var k=$("#compressed-private-key-modal");k.modal({keyboard:true,backdrop:"static",show:true});k.center();k.find(".btn.btn-secondary").unbind().click(function(){l();k.modal("hide")});k.find(".btn.btn-primary").unbind().click(function(){j();k.modal("hide")})}function g(j){MyWallet.setLoadingText("Importing Backup");MyWallet.securePost("wallet",{method:"get-backup",id:j,format:"json"},function(m){try{var l=m.payload;MyWallet.getMainPassword(function(n){MyWallet.getSecondPassword(function(o){ImportExport.importJSON(l,{main_password:n,second_password:o},function(){MyWallet.backupWallet("update",function(){MyWallet.get_history()})},function(p){MyWallet.makeNotice("error","misc-error",p)})})})}catch(k){MyWallet.makeNotice("error","misc-error",k)}},function(k){MyWallet.makeNotice("error","misc-error",k.responseText)})}function i(j){MyWallet.setLoadingText("Loading Backup List");MyWallet.securePost("wallet",{method:"list-backups",format:"json"},function(q){try{if(q==null){throw"Failed to get backups"}var l=j.find("table tbody").empty();var n=q.results;if(n.length==0){throw"No backups found"}for(var m in n){var k=n[m];var o=$("<tr><td>"+k.name+"</td><td>"+dateToString(new Date(k.last_modified))+"</td><td>"+k.size+'</td><td><a class="act-import">Import</a></td></tr>');(function(r){o.find(".act-import").click(function(){g(r.id)})})(k);l.append(o)}}catch(p){MyWallet.makeNotice("error","misc-error",p)}},function(k){MyWallet.makeNotice("error","misc-error",k.responseText)})}function a(l,j,m,k){MyWallet.getSecondPassword(function(){try{if(!l||l.length==0){throw"You must enter a private key to import"}var q=MyWallet.detectPrivateKeyFormat(l);var n=MyWallet.privateKeyStringToKey(l,q);var r=null;if(q=="compsipa"){r=n.getBitcoinAddressCompressed().toString()}else{r=n.getBitcoinAddress().toString()}if(r==null||r.length==0||r=="undefined"){throw"Unable to decode bitcoin addresses from private key"}if(MyWallet.addressExists(r)&&!MyWallet.isWatchOnly(r)){throw"Address already exists in the wallet"}function o(){loadScript("wallet/signer",function(){BlockchainAPI.get_balance([r],function(s){var t=initNewTx();t.fee=t.base_fee;t.to_addresses.push({address:new Bitcoin.Address(MyWallet.getPreferredAddress()),value:BigInteger.valueOf(s).subtract(t.fee)});t.from_addresses=[r];t.extra_private_keys[r]=B58.encode(n.priv);t.start()},function(){MyWallet.makeNotice("error","misc-error","Error Getting Address Balance")})})}f(r,function(){if(q=="compsipa"){b(function(){if(MyWallet.addPrivateKey(n,{compressed:true,app_name:k?k:IMPORTED_APP_NAME,app_version:IMPORTED_APP_VERSION})){if(j&&j.length>0){MyWallet.setAddressLabel(r,j)}MyWallet.backupWallet("update",function(){MyWallet.get_history()});if(m){m()}MyWallet.makeNotice("success","added","Added Bitcoin Address "+r)}},function(){o()})}else{if(MyWallet.addPrivateKey(n,{compressed:false,app_name:k?k:IMPORTED_APP_NAME,app_version:IMPORTED_APP_VERSION})){if(j&&j.length>0){MyWallet.setAddressLabel(r,j)}MyWallet.backupWallet("update",function(){MyWallet.get_history()});if(m){m()}MyWallet.makeNotice("success","added-adress","Added bitcoin address "+r)}else{throw"Unable to add private key for bitcoin address "+r}}},function(){o()})}catch(p){MyWallet.makeNotice("error","misc-error","Error importing private key: "+p)}})}}var ImportExport=new _ImportExport();